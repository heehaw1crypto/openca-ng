import type { FieldsRole } from "./FieldsRole";
import type { FieldsUserOrganization } from "./FieldsUserOrganization";
import type { FieldsUserRole } from "./FieldsUserRole";
import type { FieldsOrganization } from "./FieldsOrganization";
import type { WhereRole } from "./WhereRole";
import type { WhereUserOrganization } from "./WhereUserOrganization";
import type { WhereUserRole } from "./WhereUserRole";
import type { WhereOrganization } from "./WhereOrganization";
import type { OrderByUserOrganization } from "./OrderByUserOrganization";
import type { OrderByUserRole } from "./OrderByUserRole";
import type { OrderByOrganization } from "./OrderByOrganization";
import type { OrderByRole } from "./OrderByRole";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type FieldsUser = (("id" | "primaryRoleId" | "primaryRoleEnum" | "firstName" | "lastName" | "username" | "email" | "password" | "uuid" | "shortDescription" | "longDescription" | "created" | "creator" | "metadata" | "updated" | "updaterIdentityUuid" | "valid" | "archived" | "cacheKey" | "integrityKey" | "deidentified" | "deidentifiedTimestamp" | "markedForExpungepment" | "expungementTimestamp" | "containsSensitiveData" | "sensitivityClassificationTypeEnum" | "version" | "correlationUuid" | "externalId" | "comment" | "recordType" | "primaryRoleUuid") | {
    name: "role";
    as?: string;
    fields: FieldsRole;
    args?: {
        $where?: WhereRole;
    };
} | {
    name: "userOrganizationList";
    as?: string;
    fields: FieldsUserOrganization;
    args?: {
        $where?: WhereUserOrganization;
        $orderBy?: OrderByUserOrganization;
    };
} | {
    name: "userRoleList";
    as?: string;
    fields: FieldsUserRole;
    args?: {
        $where?: WhereUserRole;
        $orderBy?: OrderByUserRole;
    };
} | {
    name: "organizationList";
    as?: string;
    fields: FieldsOrganization;
    args?: {
        $where?: WhereOrganization | [WhereOrganization, WhereUserOrganization];
        $orderBy?: OrderByOrganization;
    };
} | {
    name: "roleList";
    as?: string;
    fields: FieldsRole;
    args?: {
        $where?: WhereRole | [WhereRole, WhereUserRole];
        $orderBy?: OrderByRole;
    };
})[];
