import type { FieldsOrganizationAddress } from "./FieldsOrganizationAddress";
import type { FieldsOrganizationCertificateToken } from "./FieldsOrganizationCertificateToken";
import type { FieldsUserOrganization } from "./FieldsUserOrganization";
import type { FieldsAddress } from "./FieldsAddress";
import type { FieldsCertificateToken } from "./FieldsCertificateToken";
import type { FieldsUser } from "./FieldsUser";
import type { WhereOrganizationAddress } from "./WhereOrganizationAddress";
import type { WhereOrganizationCertificateToken } from "./WhereOrganizationCertificateToken";
import type { WhereUserOrganization } from "./WhereUserOrganization";
import type { WhereAddress } from "./WhereAddress";
import type { WhereCertificateToken } from "./WhereCertificateToken";
import type { WhereUser } from "./WhereUser";
import type { OrderByOrganizationAddress } from "./OrderByOrganizationAddress";
import type { OrderByOrganizationCertificateToken } from "./OrderByOrganizationCertificateToken";
import type { OrderByUserOrganization } from "./OrderByUserOrganization";
import type { OrderByAddress } from "./OrderByAddress";
import type { OrderByCertificateToken } from "./OrderByCertificateToken";
import type { OrderByUser } from "./OrderByUser";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type FieldsOrganization = (("id" | "name" | "description" | "siteUrl" | "logoUrl" | "isEnabled" | "uuid" | "shortDescription" | "longDescription" | "created" | "creator" | "metadata" | "updated" | "updaterIdentityUuid" | "valid" | "archived" | "cacheKey" | "integrityKey" | "deidentified" | "deidentifiedTimestamp" | "markedForExpungepment" | "expungementTimestamp" | "containsSensitiveData" | "sensitivityClassificationTypeEnum" | "version" | "correlationUuid" | "externalId" | "comment" | "recordType") | {
    name: "organizationAddressList";
    as?: string;
    fields: FieldsOrganizationAddress;
    args?: {
        $where?: WhereOrganizationAddress;
        $orderBy?: OrderByOrganizationAddress;
    };
} | {
    name: "organizationCertificateTokenList";
    as?: string;
    fields: FieldsOrganizationCertificateToken;
    args?: {
        $where?: WhereOrganizationCertificateToken;
        $orderBy?: OrderByOrganizationCertificateToken;
    };
} | {
    name: "userOrganizationList";
    as?: string;
    fields: FieldsUserOrganization;
    args?: {
        $where?: WhereUserOrganization;
        $orderBy?: OrderByUserOrganization;
    };
} | {
    name: "addressList";
    as?: string;
    fields: FieldsAddress;
    args?: {
        $where?: WhereAddress | [WhereAddress, WhereOrganizationAddress];
        $orderBy?: OrderByAddress;
    };
} | {
    name: "certificateTokenList";
    as?: string;
    fields: FieldsCertificateToken;
    args?: {
        $where?: WhereCertificateToken | [WhereCertificateToken, WhereOrganizationCertificateToken];
        $orderBy?: OrderByCertificateToken;
    };
} | {
    name: "userList";
    as?: string;
    fields: FieldsUser;
    args?: {
        $where?: WhereUser | [WhereUser, WhereUserOrganization];
        $orderBy?: OrderByUser;
    };
})[];
