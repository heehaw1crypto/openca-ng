import type { FieldsUser } from "./FieldsUser";
import type { FieldsUserRole } from "./FieldsUserRole";
import type { WhereUser } from "./WhereUser";
import type { WhereUserRole } from "./WhereUserRole";
import type { OrderByUser } from "./OrderByUser";
import type { OrderByUserRole } from "./OrderByUserRole";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type FieldsRole = (("id" | "enum" | "name" | "uuid" | "shortDescription" | "longDescription" | "created" | "creator" | "metadata" | "updated" | "updaterIdentityUuid" | "valid" | "archived" | "cacheKey" | "integrityKey" | "deidentified" | "deidentifiedTimestamp" | "markedForExpungepment" | "expungementTimestamp" | "containsSensitiveData" | "sensitivityClassificationTypeEnum" | "version" | "correlationUuid" | "externalId" | "comment" | "recordType") | {
    name: "userList";
    as?: string;
    fields: FieldsUser;
    args?: {
        $where?: WhereUser;
        $orderBy?: OrderByUser;
    };
} | {
    name: "userRoleList";
    as?: string;
    fields: FieldsUserRole;
    args?: {
        $where?: WhereUserRole;
        $orderBy?: OrderByUserRole;
    };
} | {
    name: "userList";
    as?: string;
    fields: FieldsUser;
    args?: {
        $where?: WhereUser | [WhereUser, WhereUserRole];
        $orderBy?: OrderByUser;
    };
})[];
